# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: /api
  endpoints:
    getAssetBySlug:
      path: /assets/{app}/{idOrSlug}/{more}
      method: GET
      display-name: Get the asset content.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        idOrSlug:
          docs: The id or slug of the asset.
          type: string
        more:
          docs: >-
            Optional suffix that can be used to seo-optimize the link to the
            image Has not effect.
          type: string
      request:
        name: GetAssetContentBySlugRequest
        query-parameters:
          version:
            docs: The optional version of the asset.
            type: optional<integer>
          cache:
            docs: The cache duration in seconds.
            type: optional<integer>
          download:
            docs: Set it to 0 to prevent download.
            type: optional<integer>
          width:
            docs: The target width of the asset, if it is an image.
            type: optional<integer>
          height:
            docs: The target height of the asset, if it is an image.
            type: optional<integer>
          quality:
            docs: Optional image quality, it is is an jpeg image.
            type: optional<integer>
          mode:
            docs: The resize mode when the width and height is defined.
            type: optional<ResizeMode>
          bg:
            docs: Optional background color.
            type: optional<string>
          focusX:
            docs: Override the y focus point.
            type: optional<double>
          focusY:
            docs: Override the x focus point.
            type: optional<double>
          nofocus:
            docs: True to ignore the asset focus point if any.
            type: optional<boolean>
          auto:
            docs: True to use auto format.
            type: optional<boolean>
          force:
            docs: True to force a new resize even if it already stored.
            type: optional<boolean>
          format:
            docs: True to force a new resize even if it already stored.
            type: optional<ImageFormat>

    get:
      path: /assets/{id}
      method: GET
      display-name: Get the asset content.
      path-parameters:
        id:
          docs: The ID of the asset.
          type: string
      request:
        name: GetAssetContentRequest
        query-parameters:
          version:
            docs: The optional version of the asset.
            type: optional<integer>
          cache:
            docs: The cache duration in seconds.
            type: optional<integer>
          download:
            docs: Set it to 0 to prevent download.
            type: optional<integer>
          width:
            docs: The target width of the asset, if it is an image.
            type: optional<integer>
          height:
            docs: The target height of the asset, if it is an image.
            type: optional<integer>
          quality:
            docs: Optional image quality, it is is an jpeg image.
            type: optional<integer>
          mode:
            docs: The resize mode when the width and height is defined.
            type: optional<ResizeMode>
          bg:
            docs: Optional background color.
            type: optional<string>
          focusX:
            docs: Override the y focus point.
            type: optional<double>
          focusY:
            docs: Override the x focus point.
            type: optional<double>
          nofocus:
            docs: True to ignore the asset focus point if any.
            type: optional<boolean>
          auto:
            docs: True to use auto format.
            type: optional<boolean>
          force:
            docs: True to force a new resize even if it already stored.
            type: optional<boolean>
          format:
            docs: True to force a new resize even if it already stored.
            type: optional<ImageFormat>

    getAssetFolders:
      path: /apps/{app}/assets/folders
      method: GET
      docs: Get all asset folders for the app.
      display-name: Get asset folders.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        name: GetAssetFoldersRequest
        query-parameters:
          parentId:
            docs: The optional parent folder id.
            type: optional<string>
          scope:
            docs: The scope of the query.
            type: optional<AssetFolderScope>
      response: AssetFoldersDto

    createAssetFolder:
      path: /apps/{app}/assets/folders
      method: POST
      display-name: Create an asset folder.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: CreateAssetFolderDto

    updateAssetFolder:
      path: /apps/{app}/assets/folders/{id}
      method: PUT
      display-name: Update an asset folder.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset folder.
          type: string
      request:
        body: RenameAssetFolderDto
      response: AssetFolderDto

    deleteAssetFolder:
      path: /apps/{app}/assets/folders/{id}
      method: DELETE
      display-name: Delete an asset folder.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset folder to delete.
          type: string

    moveAssetFolder:
      path: /apps/{app}/assets/folders/{id}/parent
      method: PUT
      display-name: Move an asset folder.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset folder.
          type: string
      request:
        body: MoveAssetFolderDto
      response: AssetFolderDto

    getTags:
      path: /apps/{app}/assets/tags
      method: GET
      docs: Get all tags for assets.
      display-name: Get assets tags.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: map<string, integer>

    renameTag:
      path: /apps/{app}/assets/tags/{name}
      method: PUT
      display-name: Rename an asset tag.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        name:
          docs: The tag to return.
          type: string
      request:
        body: RenameTagDto
      response: map<string, integer>

    getAll:
      path: /apps/{app}/assets
      method: GET
      docs: Get all assets for the app.
      display-name: Get assets.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        name: GetAllAssetsRequest
        query-parameters:
          parentId:
            docs: The optional parent folder id.
            type: optional<string>
          ids:
            docs: The optional asset ids.
            type: optional<string>
          q:
            docs: The optional json query.
            type: optional<string>
          $top:
            docs: Optional number of items to take.
            type: optional<double>
          $skip:
            docs: Optional number of items to skip.
            type: optional<double>
          $orderby:
            docs: Optional OData order definition.
            type: optional<string>
          $filter:
            docs: Optional OData filter.
            type: optional<string>
      response: AssetsDto

    upload:
      path: /apps/{app}/assets
      method: POST
      docs: >-
        You can only upload one file at a time. The mime type of the file is not
        calculated by Squidex and is required correctly.
      display-name: Upload a new asset.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        name: UploadAssetsRequest
        query-parameters:
          ParentId:
            docs: The optional parent folder id.
            type: optional<string>
          Id:
            docs: The optional custom asset id.
            type: optional<string>
          Duplicate:
            docs: True to duplicate the asset, event if the file has been uploaded.
            type: optional<boolean>

    getAllAssetsPost:
      path: /apps/{app}/assets/query
      method: POST
      docs: Get all assets for the app.
      display-name: Get assets.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: QueryDto
      response: AssetsDto

    getById:
      path: /apps/{app}/assets/{id}
      method: GET
      display-name: Get an asset by id.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset to retrieve.
          type: string
      response: AssetDto

    update:
      path: /apps/{app}/assets/{id}
      method: PUT
      display-name: Update an asset.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset.
          type: string
      request:
        body: AnnotateAssetDto
      response: AssetDto

    upsert:
      path: /apps/{app}/assets/{id}
      method: POST
      docs: >-
        You can only upload one file at a time. The mime type of the file is not
        calculated by Squidex and is required correctly.
      display-name: Upsert an asset.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The optional custom asset id.
          type: string
      request:
        name: UpsertAssetRequest
        query-parameters:
          ParentId:
            docs: The optional parent folder id.
            type: optional<string>
          Duplicate:
            docs: True to duplicate the asset, event if the file has been uploaded.
            type: optional<boolean>
      response: AssetDto

    delete:
      path: /apps/{app}/assets/{id}
      method: DELETE
      display-name: Delete an asset.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset to delete.
          type: string
      request:
        name: DeleteAssetRequest
        query-parameters:
          CheckReferrers:
            docs: True to check referrers of this asset.
            type: optional<boolean>
          Permanent:
            docs: True to delete the asset permanently.
            type: optional<boolean>

    updateBulkAssets:
      path: /apps/{app}/assets/bulk
      method: POST
      display-name: Bulk update assets.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: BulkUpdateAssetsDto
      response: list<BulkResultDto>

    replace:
      path: /apps/{app}/assets/{id}/content
      method: PUT
      docs: Use multipart request to upload an asset.
      display-name: Replace asset content.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset.
          type: string
      response: AssetDto

    move:
      path: /apps/{app}/assets/{id}/parent
      method: PUT
      display-name: Moves the asset.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the asset.
          type: string
      request:
        body: MoveAssetDto
      response: AssetDto

types:
  ResizeMode:
    docs: ""
    enum:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch

  ImageFormat:
    docs: ""
    enum:
      - AVIF
      - BMP
      - GIF
      - JPEG
      - PNG
      - TGA
      - TIFF
      - WEBP

  AssetFoldersDto:
    extends: commons.Resource
    properties:
      total:
        docs: The total number of assets.
        type: optional<integer>
      items:
        docs: The assets folders.
        type: list<AssetFolderDto>
      path:
        docs: The path to the current folder.
        type: list<AssetFolderDto>

  AssetFolderScope:
    docs: ""
    enum:
      - PathAndItems
      - Path
      - Items

  AssetFolderDto:
    extends: commons.Resource
    properties:
      id:
        docs: The ID of the asset.
        type: optional<string>
      parentId:
        docs: The ID of the parent folder. Empty for files without parent.
        type: optional<string>
      folderName:
        docs: The folder name.
        type: string
      version:
        docs: The version of the asset folder.
        type: optional<integer>

  CreateAssetFolderDto:
    properties:
      folderName:
        docs: The name of the folder.
        type: string
      parentId:
        docs: The ID of the parent folder.
        type: optional<string>

  RenameAssetFolderDto:
    properties:
      folderName:
        docs: The name of the folder.
        type: string

  MoveAssetFolderDto:
    properties:
      parentId:
        docs: The parent folder id.
        type: optional<string>

  RenameTagDto:
    properties:
      tagName:
        docs: The new name for the tag.
        type: string

  AssetsDto:
    extends: commons.Resource
    properties:
      total:
        docs: The total number of assets.
        type: optional<integer>
      items:
        docs: The assets.
        type: list<AssetDto>

  AssetDto:
    extends: commons.Resource
    properties:
      id:
        docs: The ID of the asset.
        type: optional<string>
      parentId:
        docs: The ID of the parent folder. Empty for files without parent.
        type: optional<string>
      fileName:
        docs: The file name.
        type: string
      fileHash:
        docs: The file hash.
        type: optional<string>
      isProtected:
        docs: True, when the asset is not public.
        type: optional<boolean>
      slug:
        docs: The slug.
        type: string
      mimeType:
        docs: The mime type.
        type: string
      fileType:
        docs: The file type.
        type: string
      metadataText:
        docs: The formatted text representation of the metadata.
        type: string
      editToken:
        docs: The UI token.
        type: optional<string>
      metadata:
        docs: The asset metadata.
        type: map<string, unknown>
      tags:
        docs: The asset tags.
        type: list<string>
      fileSize:
        docs: The size of the file in bytes.
        type: optional<integer>
      fileVersion:
        docs: The version of the file.
        type: optional<integer>
      type: optional<AssetType>
      createdBy:
        docs: The user that has created the schema.
        type: string
      lastModifiedBy:
        docs: The user that has updated the asset.
        type: string
      created:
        docs: The date and time when the asset has been created.
        type: optional<string>
      lastModified:
        docs: The date and time when the asset has been modified last.
        type: optional<string>
      version:
        docs: The version of the asset.
        type: optional<integer>
      _meta: optional<AssetMeta>
      isImage:
        docs: Determines of the created file is an image.
        type: optional<boolean>
      pixelWidth:
        docs: The width of the image in pixels if the asset is an image.
        type: optional<integer>
      pixelHeight:
        docs: The height of the image in pixels if the asset is an image.
        type: optional<integer>

  AssetType:
    docs: ""
    enum:
      - Unknown
      - Image
      - Audio
      - Video

  AssetMeta:
    properties:
      isDuplicate:
        docs: Indicates whether the asset is a duplicate.
        type: optional<string>

  QueryDto:
    properties:
      ids:
        docs: The optional list of ids to query.
        type: optional<list<string>>
      oData:
        docs: The optional odata query.
        type: optional<string>
      q:
        docs: The optional json query.
        type: optional<unknown>
      parentId:
        docs: The parent id (for assets).
        type: optional<string>

  AnnotateAssetDto:
    properties:
      fileName:
        docs: The new name of the asset.
        type: optional<string>
      slug:
        docs: The new slug of the asset.
        type: optional<string>
      isProtected:
        docs: True, when the asset is not public.
        type: optional<boolean>
      tags:
        docs: The new asset tags.
        type: optional<list<string>>
      metadata:
        docs: The asset metadata.
        type: optional<map<string, unknown>>

  BulkUpdateAssetsDto:
    properties:
      jobs:
        docs: The contents to update or insert.
        type: list<BulkUpdateAssetsJobDto>
      checkReferrers:
        docs: True to check referrers of deleted assets.
        type: optional<boolean>
      optimizeValidation:
        docs: "True to turn off costly validation: Folder checks. Default: true."
        type: optional<boolean>
      doNotScript:
        docs: "True to turn off scripting for faster inserts. Default: true."
        type: optional<boolean>

  BulkUpdateAssetsJobDto:
    properties:
      id:
        docs: An optional ID of the asset to update.
        type: optional<string>
      type: optional<BulkUpdateAssetType>
      parentId:
        docs: The parent folder id.
        type: optional<string>
      fileName:
        docs: The new name of the asset.
        type: optional<string>
      slug:
        docs: The new slug of the asset.
        type: optional<string>
      isProtected:
        docs: True, when the asset is not public.
        type: optional<boolean>
      tags:
        docs: The new asset tags.
        type: optional<list<string>>
      metadata:
        docs: The asset metadata.
        type: optional<map<string, unknown>>
      permanent:
        docs: True to delete the asset permanently.
        type: optional<boolean>
      expectedVersion:
        docs: The expected version.
        type: optional<integer>

  BulkUpdateAssetType:
    docs: ""
    enum:
      - Annotate
      - Move
      - Delete

  BulkResultDto:
    properties:
      error: optional<ErrorDto>
      jobIndex:
        docs: >-
          The index of the bulk job where the result belongs to. The order can
          change.
        type: optional<integer>
      id:
        docs: The ID of the entity that has been handled successfully or not.
        type: optional<string>
      contentId:
        docs: The ID of the entity that has been handled successfully or not.
        type: optional<string>

  ErrorDto:
    properties:
      message:
        docs: Error message.
        type: string
      errorCode:
        docs: The error code.
        type: optional<string>
      traceId:
        docs: The optional trace id.
        type: optional<string>
      type:
        docs: Link to the error details.
        type: optional<string>
      details:
        docs: Detailed error messages.
        type: optional<list<string>>
      statusCode:
        docs: Status code of the http response.
        type: optional<integer>

  MoveAssetDto:
    properties:
      parentId:
        docs: The parent folder id.
        type: optional<string>
