# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: /api
  endpoints:
    getAssetScripts:
      path: /apps/{app}/assets/scripts
      method: GET
      display-name: Get the app asset scripts.
      path-parameters:
        app:
          docs: The name of the app to get the asset scripts for.
          type: string
      response: AssetScriptsDto

    updateAssetScripts:
      path: /apps/{app}/assets/scripts
      method: PUT
      display-name: Update the app asset scripts.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      request:
        body: UpdateAssetScriptsDto
      response: AssetScriptsDto

    getClients:
      path: /apps/{app}/clients
      method: GET
      docs: Gets all configured clients for the app with the specified name.
      display-name: Get app clients.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: ClientsDto

    createClient:
      path: /apps/{app}/clients
      method: POST
      docs: >-
        Create a new client for the app with the specified name.
        The client secret is auto generated on the server and returned. The
        client does not expire, the access token is valid for 30 days.
      display-name: Create a new app client.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: CreateClientDto

    updateClient:
      path: /apps/{app}/clients/{id}
      method: PUT
      docs: Only the display name can be changed, create a new client if necessary.
      display-name: Updates an app client.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the client that must be updated.
          type: string
      request:
        body: UpdateClientDto
      response: ClientsDto

    deleteClient:
      path: /apps/{app}/clients/{id}
      method: DELETE
      docs: >-
        The application that uses this client credentials cannot access the API
        after it has been revoked.
      display-name: Revoke an app client.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the client that must be deleted.
          type: string
      response: ClientsDto

    getContributors:
      path: /apps/{app}/contributors
      method: GET
      display-name: Get app contributors.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: commons.ContributorsDto

    assignContributor:
      path: /apps/{app}/contributors
      method: POST
      display-name: Assign contributor to app.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: commons.AssignContributorDto

    deleteSelf:
      path: /apps/{app}/contributors/me
      method: DELETE
      display-name: Remove yourself.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: commons.ContributorsDto

    deleteContributor:
      path: /apps/{app}/contributors/{id}
      method: DELETE
      display-name: Remove contributor.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the contributor.
          type: string
      response: commons.ContributorsDto

    getImage:
      path: /apps/{app}/image
      method: GET
      display-name: Get the app image.
      path-parameters:
        app:
          docs: The name of the app.
          type: string

    uploadImage:
      path: /apps/{app}/image
      method: POST
      display-name: Upload the app image.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      response: AppDto

    deleteImage:
      path: /apps/{app}/image
      method: DELETE
      display-name: Remove the app image.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      response: AppDto

    getLanguages:
      path: /apps/{app}/languages
      method: GET
      display-name: Get app languages.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: AppLanguagesDto

    addLanguage:
      path: /apps/{app}/languages
      method: POST
      display-name: Attaches an app language.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: AddLanguageDto

    updateLanguage:
      path: /apps/{app}/languages/{language}
      method: PUT
      display-name: Updates an app language.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        language:
          docs: The language to update.
          type: string
      request:
        body: UpdateLanguageDto
      response: AppLanguagesDto

    deleteLanguage:
      path: /apps/{app}/languages/{language}
      method: DELETE
      display-name: Deletes an app language.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        language:
          docs: The language to delete from the app.
          type: string
      response: AppLanguagesDto

    getRoles:
      path: /apps/{app}/roles
      method: GET
      display-name: Get app roles.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: RolesDto

    createRole:
      path: /apps/{app}/roles
      method: POST
      display-name: Add role to app.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: AddRoleDto

    getPermissions:
      path: /apps/{app}/roles/permissions
      method: GET
      display-name: Get app permissions.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: list<string>

    updateRole:
      path: /apps/{app}/roles/{roleName}
      method: PUT
      display-name: Update an app role.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        roleName:
          docs: The name of the role to be updated.
          type: string
      request:
        body: UpdateRoleDto
      response: RolesDto

    deleteRole:
      path: /apps/{app}/roles/{roleName}
      method: DELETE
      display-name: Remove role from app.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        roleName:
          docs: The name of the role.
          type: string
      response: RolesDto

    getAll:
      path: /apps
      method: GET
      docs: >-
        You can only retrieve the list of apps when you are authenticated as a
        user (OpenID implicit flow).
        You will retrieve all apps, where you are assigned as a contributor.
      display-name: Get your apps.
      response: list<AppDto>

    create:
      path: /apps
      method: POST
      docs: >-
        You can only create an app when you are authenticated as a user (OpenID
        implicit flow).
        You will be assigned as owner of the new app automatically.
      display-name: Create a new app.
      request:
        body: CreateAppDto

    getTeamApps:
      path: /teams/{team}/apps
      method: GET
      docs: >-
        You can only retrieve the list of apps when you are authenticated as a
        user (OpenID implicit flow).
        You will retrieve all apps, where you are assigned as a contributor.
      display-name: Get team apps.
      path-parameters:
        team:
          docs: The ID of the team.
          type: string
      response: list<AppDto>

    get:
      path: /apps/{app}
      method: GET
      display-name: Get an app by name.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: AppDto

    update:
      path: /apps/{app}
      method: PUT
      display-name: Update the app.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      request:
        body: UpdateAppDto
      response: AppDto

    delete:
      path: /apps/{app}
      method: DELETE
      display-name: Delete the app.
      path-parameters:
        app:
          docs: The name of the app to delete.
          type: string

    transfer:
      path: /apps/{app}/team
      method: PUT
      display-name: Transfer the app.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      request:
        body: TransferToTeamDto
      response: AppDto

    getSettings:
      path: /apps/{app}/settings
      method: GET
      display-name: Get the app settings.
      path-parameters:
        app:
          docs: The name of the app to get the settings for.
          type: string
      response: AppSettingsDto

    updateSettings:
      path: /apps/{app}/settings
      method: PUT
      display-name: Update the app settings.
      path-parameters:
        app:
          docs: The name of the app to update.
          type: string
      request:
        body: UpdateAppSettingsDto
      response: AppSettingsDto

    getWorkflows:
      path: /apps/{app}/workflows
      method: GET
      display-name: Get app workflow.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      response: WorkflowsDto

    createWorkflow:
      path: /apps/{app}/workflows
      method: POST
      display-name: Create a workflow.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
      request:
        body: AddWorkflowDto
      response: WorkflowsDto

    updateWorkflow:
      path: /apps/{app}/workflows/{id}
      method: PUT
      display-name: Update a workflow.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the workflow to update.
          type: string
      request:
        body: UpdateWorkflowDto
      response: WorkflowsDto

    deleteWorkflow:
      path: /apps/{app}/workflows/{id}
      method: DELETE
      display-name: Delete a workflow.
      path-parameters:
        app:
          docs: The name of the app.
          type: string
        id:
          docs: The ID of the workflow to update.
          type: string
      response: WorkflowsDto

types:
  AssetScriptsDto:
    extends: commons.Resource
    properties:
      query:
        docs: The script that is executed for each asset when querying assets.
        type: optional<string>
      queryPre:
        docs: The script that is executed for all assets when querying assets.
        type: optional<string>
      create:
        docs: The script that is executed when creating an asset.
        type: optional<string>
      update:
        docs: The script that is executed when updating a content.
        type: optional<string>
      annotate:
        docs: The script that is executed when annotating a content.
        type: optional<string>
      move:
        docs: The script that is executed when moving a content.
        type: optional<string>
      delete:
        docs: The script that is executed when deleting a content.
        type: optional<string>
      version:
        docs: The version of the app.
        type: optional<integer>

  UpdateAssetScriptsDto:
    properties:
      query:
        docs: The script that is executed for each asset when querying assets.
        type: optional<string>
      queryPre:
        docs: The script that is executed for all assets when querying assets.
        type: optional<string>
      create:
        docs: The script that is executed when creating an asset.
        type: optional<string>
      update:
        docs: The script that is executed when updating a content.
        type: optional<string>
      annotate:
        docs: The script that is executed when annotating a content.
        type: optional<string>
      move:
        docs: The script that is executed when moving a content.
        type: optional<string>
      delete:
        docs: The script that is executed when deleting a content.
        type: optional<string>

  ClientsDto:
    extends: commons.Resource
    properties:
      items:
        docs: The clients.
        type: list<ClientDto>

  ClientDto:
    extends: commons.Resource
    properties:
      id:
        docs: The client id.
        type: string
      secret:
        docs: The client secret.
        type: string
      name:
        docs: The client name.
        type: string
      role:
        docs: The role of the client.
        type: optional<string>
      apiCallsLimit:
        docs: The number of allowed api calls per month for this client.
        type: optional<integer>
      apiTrafficLimit:
        docs: The number of allowed api traffic bytes per month for this client.
        type: optional<integer>
      allowAnonymous:
        docs: >-
          True to allow anonymous access without an access token for this
          client.
        type: optional<boolean>

  CreateClientDto:
    properties:
      id:
        docs: The ID of the client.
        type: string

  UpdateClientDto:
    properties:
      name:
        docs: The new display name of the client.
        type: optional<string>
      role:
        docs: The role of the client.
        type: optional<string>
      allowAnonymous:
        docs: >-
          True to allow anonymous access without an access token for this
          client.
        type: optional<boolean>
      apiCallsLimit:
        docs: The number of allowed api calls per month for this client.
        type: optional<integer>
      apiTrafficLimit:
        docs: The number of allowed api traffic bytes per month for this client.
        type: optional<integer>

  AppDto:
    extends: commons.Resource
    properties:
      id:
        docs: The ID of the app.
        type: optional<string>
      name:
        docs: The name of the app.
        type: string
      label:
        docs: The optional label of the app.
        type: optional<string>
      description:
        docs: The optional description of the app.
        type: optional<string>
      version:
        docs: The version of the app.
        type: optional<integer>
      created:
        docs: The timestamp when the app has been created.
        type: optional<string>
      lastModified:
        docs: The timestamp when the app has been modified last.
        type: optional<string>
      teamId:
        docs: The ID of the team.
        type: optional<string>
      permissions:
        docs: The permission level of the user.
        type: optional<list<string>>
      canAccessApi:
        docs: Indicates if the user can access the api.
        type: optional<boolean>
      canAccessContent:
        docs: Indicates if the user can access at least one content.
        type: optional<boolean>
      roleName:
        docs: The role name of the user.
        type: optional<string>
      roleProperties:
        docs: The properties from the role.
        type: map<string, unknown>

  AppLanguagesDto:
    extends: commons.Resource
    properties:
      items:
        docs: The languages.
        type: list<AppLanguageDto>

  AppLanguageDto:
    extends: commons.Resource
    properties:
      iso2Code:
        docs: The iso code of the language.
        type: string
      englishName:
        docs: The english name of the language.
        type: string
      fallback:
        docs: The fallback languages.
        type: list<string>
      isMaster:
        docs: Indicates if the language is the master language.
        type: optional<boolean>
      isOptional:
        docs: Indicates if the language is optional.
        type: optional<boolean>

  AddLanguageDto:
    properties:
      language:
        docs: The language to add.
        type: string

  UpdateLanguageDto:
    properties:
      isMaster:
        docs: Set the value to true to make the language the master.
        type: optional<boolean>
      isOptional:
        docs: Set the value to true to make the language optional.
        type: optional<boolean>
      fallback:
        docs: Optional fallback languages.
        type: optional<list<string>>

  RolesDto:
    extends: commons.Resource
    properties:
      items:
        docs: The roles.
        type: list<RoleDto>

  RoleDto:
    extends: commons.Resource
    properties:
      name:
        docs: The role name.
        type: string
      numClients:
        docs: The number of clients with this role.
        type: optional<integer>
      numContributors:
        docs: The number of contributors with this role.
        type: optional<integer>
      isDefaultRole:
        docs: Indicates if the role is an builtin default role.
        type: optional<boolean>
      permissions:
        docs: Associated list of permissions.
        type: list<string>
      properties:
        docs: Associated list of UI properties.
        type: map<string, unknown>

  AddRoleDto:
    properties:
      name:
        docs: The role name.
        type: string

  UpdateRoleDto:
    properties:
      permissions:
        docs: Associated list of permissions.
        type: list<string>
      properties:
        docs: Associated list of UI properties.
        type: optional<map<string, unknown>>

  CreateAppDto:
    properties:
      name:
        docs: The name of the app.
        type: string
      template:
        docs: Initialize the app with the inbuilt template.
        type: optional<string>

  UpdateAppDto:
    properties:
      label:
        docs: The optional label of your app.
        type: optional<string>
      description:
        docs: The optional description of your app.
        type: optional<string>

  TransferToTeamDto:
    properties:
      teamId:
        docs: The ID of the team.
        type: optional<string>

  AppSettingsDto:
    extends: commons.Resource
    properties:
      patterns:
        docs: The configured app patterns.
        type: list<PatternDto>
      editors:
        docs: The configured UI editors.
        type: list<EditorDto>
      hideScheduler:
        docs: Hide the scheduler for content items.
        type: optional<boolean>
      hideDateTimeModeButton:
        docs: Hide the datetime mode button.
        type: optional<boolean>
      version:
        docs: The version of the app.
        type: optional<integer>

  PatternDto:
    properties:
      name:
        docs: The name of the suggestion.
        type: string
      regex:
        docs: The regex pattern.
        type: string
      message:
        docs: The regex message.
        type: optional<string>

  EditorDto:
    properties:
      name:
        docs: The name of the editor.
        type: string
      url:
        docs: The url to the editor.
        type: string

  UpdateAppSettingsDto:
    properties:
      patterns:
        docs: The configured app patterns.
        type: list<PatternDto>
      editors:
        docs: The configured UI editors.
        type: list<EditorDto>
      hideScheduler:
        docs: Hide the scheduler for content items.
        type: optional<boolean>
      hideDateTimeModeButton:
        docs: Hide the datetime mode button.
        type: optional<boolean>

  WorkflowsDto:
    extends: commons.Resource
    properties:
      items:
        docs: The workflow.
        type: list<WorkflowDto>
      errors:
        docs: The errros that should be fixed.
        type: list<string>

  WorkflowDto:
    extends: commons.Resource
    properties:
      id:
        docs: The workflow id.
        type: optional<string>
      name:
        docs: The name of the workflow.
        type: optional<string>
      steps:
        docs: The workflow steps.
        type: map<string, WorkflowStepDto>
      schemaIds:
        docs: The schema ids.
        type: optional<list<string>>
      initial:
        docs: The initial step.
        type: optional<string>

  WorkflowStepDto:
    properties:
      transitions:
        docs: The transitions.
        type: map<string, WorkflowTransitionDto>
      color:
        docs: The optional color.
        type: optional<string>
      validate:
        docs: True if the content should be validated when moving to this step.
        type: optional<boolean>
      noUpdate:
        docs: Indicates if updates should not be allowed.
        type: optional<boolean>
      noUpdateExpression:
        docs: >-
          Optional expression that must evaluate to true when you want to
          prevent updates.
        type: optional<string>
      noUpdateRoles:
        docs: >-
          Optional list of roles to restrict the updates for users with these
          roles.
        type: optional<list<string>>

  WorkflowTransitionDto:
    properties:
      expression:
        docs: The optional expression.
        type: optional<string>
      roles:
        docs: The optional restricted role.
        type: optional<list<string>>

  AddWorkflowDto:
    properties:
      name:
        docs: The name of the workflow.
        type: string

  UpdateWorkflowDto:
    properties:
      name:
        docs: The name of the workflow.
        type: optional<string>
      steps:
        docs: The workflow steps.
        type: map<string, WorkflowStepDto>
      schemaIds:
        docs: The schema ids.
        type: optional<list<string>>
      initial:
        docs: The initial step.
        type: string
