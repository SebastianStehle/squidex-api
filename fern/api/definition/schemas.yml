# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: /api/apps/{app}/schemas
  path-parameters:
    app:
      docs: The name of the app.
      type: string
  endpoints:
    addField:
      path: /{schema}/fields
      method: POST
      display-name: Add a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: AddFieldDto

    addNestedField:
      path: /{schema}/fields/{parentId}/nested
      method: POST
      display-name: Add a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
      request:
        body: AddFieldDto

    configureUIFields:
      path: /{schema}/fields/ui
      method: PUT
      display-name: Configure UI fields.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: ConfigureUIFieldsDto
      response: SchemaDto

    reorderFields:
      path: /{schema}/fields/ordering
      method: PUT
      display-name: Reorder all fields.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: ReorderFieldsDto
      response: SchemaDto

    reorderNestedFields:
      path: /{schema}/fields/{parentId}/nested/ordering
      method: PUT
      display-name: Reorder all nested fields.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
      request:
        body: ReorderFieldsDto
      response: SchemaDto

    updateField:
      path: /{schema}/fields/{id}
      method: PUT
      display-name: Update a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to update.
          type: integer
      request:
        body: UpdateFieldDto
      response: SchemaDto

    deleteField:
      path: /{schema}/fields/{id}
      method: DELETE
      display-name: Delete a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to disable.
          type: integer
      response: SchemaDto

    updateNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}
      method: PUT
      display-name: Update a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to update.
          type: integer
      request:
        body: UpdateFieldDto
      response: SchemaDto

    deleteNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}
      method: DELETE
      display-name: Delete a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to disable.
          type: integer
      response: SchemaDto

    lockField:
      path: /{schema}/fields/{id}/lock
      method: PUT
      docs: A locked field cannot be updated or deleted.
      display-name: Lock a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to lock.
          type: integer
      response: SchemaDto

    lockNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}/lock
      method: PUT
      docs: A locked field cannot be edited or deleted.
      display-name: Lock a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to lock.
          type: integer
      response: SchemaDto

    hideField:
      path: /{schema}/fields/{id}/hide
      method: PUT
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      display-name: Hide a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to hide.
          type: integer
      response: SchemaDto

    hideNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}/hide
      method: PUT
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      display-name: Hide a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to hide.
          type: integer
      response: SchemaDto

    showField:
      path: /{schema}/fields/{id}/show
      method: PUT
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      display-name: Show a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to show.
          type: integer
      response: SchemaDto

    showNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}/show
      method: PUT
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      display-name: Show a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to show.
          type: integer
      response: SchemaDto

    enableField:
      path: /{schema}/fields/{id}/enable
      method: PUT
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      display-name: Enable a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to enable.
          type: integer
      response: SchemaDto

    enableNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}/enable
      method: PUT
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      display-name: Enable a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to enable.
          type: integer
      response: SchemaDto

    disableField:
      path: /{schema}/fields/{id}/disable
      method: PUT
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      display-name: Disable a schema field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        id:
          docs: The ID of the field to disable.
          type: integer
      response: SchemaDto

    disableNestedField:
      path: /{schema}/fields/{parentId}/nested/{id}/disable
      method: PUT
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      display-name: Disable a nested field.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
        parentId:
          docs: The parent field id.
          type: integer
        id:
          docs: The ID of the field to disable.
          type: integer
      response: SchemaDto

    getAll:
      path: ""
      method: GET
      display-name: Get schemas.
      response: SchemasDto

    create:
      path: ""
      method: POST
      display-name: Create a new schema.
      request:
        body: CreateSchemaDto

    get:
      path: /{schema}
      method: GET
      display-name: Get a schema by name.
      path-parameters:
        schema:
          docs: The name of the schema to retrieve.
          type: string
      response: SchemaDto

    update:
      path: /{schema}
      method: PUT
      display-name: Update a schema.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: UpdateSchemaDto
      response: SchemaDto

    delete:
      path: /{schema}
      method: DELETE
      display-name: Delete a schema.
      path-parameters:
        schema:
          docs: The name of the schema to delete.
          type: string

    sync:
      path: /{schema}/sync
      method: PUT
      display-name: Synchronize a schema.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: SynchronizeSchemaDto
      response: SchemaDto

    updateCategory:
      path: /{schema}/category
      method: PUT
      display-name: Update a schema category.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: ChangeCategoryDto
      response: SchemaDto

    updatePreviewUrls:
      path: /{schema}/preview-urls
      method: PUT
      display-name: Update the preview urls.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: ConfigurePreviewUrlsDto
      response: SchemaDto

    updateScripts:
      path: /{schema}/scripts
      method: PUT
      display-name: Update the scripts.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: SchemaScriptsDto
      response: SchemaDto

    updateRules:
      path: /{schema}/rules
      method: PUT
      display-name: Update the rules.
      path-parameters:
        schema:
          docs: The name of the schema.
          type: string
      request:
        body: ConfigureFieldRulesDto
      response: SchemaDto

    publish:
      path: /{schema}/publish
      method: PUT
      display-name: Publish a schema.
      path-parameters:
        schema:
          docs: The name of the schema to publish.
          type: string
      response: SchemaDto

    unpublishSchema:
      path: /{schema}/unpublish
      method: PUT
      display-name: Unpublish a schema.
      path-parameters:
        schema:
          docs: The name of the schema to unpublish.
          type: string
      response: SchemaDto

types:
  AddFieldDto:
    properties:
      name:
        docs: The name of the field. Must be unique within the schema.
        type: string
      partitioning:
        docs: Determines the optional partitioning of the field.
        type: optional<string>
      properties: FieldPropertiesDto

  SchemaDto:
    extends: commons.Resource
    properties:
      id:
        docs: The ID of the schema.
        type: optional<string>
      createdBy:
        docs: The user that has created the schema.
        type: string
      lastModifiedBy:
        docs: The user that has updated the schema.
        type: string
      name:
        docs: The name of the schema. Unique within the app.
        type: string
      type: optional<SchemaType>
      category:
        docs: The name of the category.
        type: optional<string>
      properties: SchemaPropertiesDto
      isSingleton:
        docs: Indicates if the schema is a singleton.
        type: optional<boolean>
      isPublished:
        docs: Indicates if the schema is published.
        type: optional<boolean>
      created:
        docs: The date and time when the schema has been created.
        type: optional<string>
      lastModified:
        docs: The date and time when the schema has been modified last.
        type: optional<string>
      version:
        docs: The version of the schema.
        type: optional<integer>
      scripts: SchemaScriptsDto
      previewUrls:
        docs: The preview Urls.
        type: map<string, unknown>
      fieldsInLists:
        docs: The name of fields that are used in content lists.
        type: list<string>
      fieldsInReferences:
        docs: The name of fields that are used in content references.
        type: list<string>
      fieldRules:
        docs: The field rules.
        type: optional<list<FieldRuleDto>>
      fields:
        docs: The list of fields.
        type: list<FieldDto>

  FieldPropertiesDto:
    properties:
      label:
        docs: Optional label for the editor.
        type: optional<string>
      hints:
        docs: Hints to describe the field.
        type: optional<string>
      placeholder:
        docs: Placeholder to show when no value has been entered.
        type: optional<string>
      isRequired:
        docs: Indicates if the field is required.
        type: optional<boolean>
      isRequiredOnPublish:
        docs: Indicates if the field is required when publishing.
        type: optional<boolean>
      isHalfWidth:
        docs: Indicates if the field should be rendered with half width only.
        type: optional<boolean>
      editorUrl:
        docs: Optional url to the editor.
        type: optional<string>
      tags:
        docs: Tags for automation processes.
        type: optional<list<string>>
      fieldType: string

  SchemaType:
    docs: ""
    enum:
      - Default
      - Singleton
      - Component

  SchemaPropertiesDto:
    properties:
      label:
        docs: Optional label for the editor.
        type: optional<string>
      hints:
        docs: Hints to describe the schema.
        type: optional<string>
      contentsSidebarUrl:
        docs: The url to a the sidebar plugin for content lists.
        type: optional<string>
      contentSidebarUrl:
        docs: The url to a the sidebar plugin for content items.
        type: optional<string>
      contentEditorUrl:
        docs: The url to the editor plugin.
        type: optional<string>
      validateOnPublish:
        docs: True to validate the content items on publish.
        type: optional<boolean>
      tags:
        docs: Tags for automation processes.
        type: optional<list<string>>

  SchemaScriptsDto:
    properties:
      query:
        docs: The script that is executed for each content when querying contents.
        type: optional<string>
      queryPre:
        docs: The script that is executed for all contents when querying contents.
        type: optional<string>
      create:
        docs: The script that is executed when creating a content.
        type: optional<string>
      update:
        docs: The script that is executed when updating a content.
        type: optional<string>
      delete:
        docs: The script that is executed when deleting a content.
        type: optional<string>
      change:
        docs: The script that is executed when change a content status.
        type: optional<string>

  FieldRuleDto:
    properties:
      action: FieldRuleAction
      field:
        docs: The field to update.
        type: string
      condition:
        docs: The condition.
        type: optional<string>

  FieldRuleAction:
    docs: ""
    enum:
      - Disable
      - Hide
      - Require

  FieldDto:
    extends: commons.Resource
    properties:
      fieldId:
        docs: The ID of the field.
        type: optional<integer>
      name:
        docs: The name of the field. Must be unique within the schema.
        type: string
      isHidden:
        docs: Defines if the field is hidden.
        type: optional<boolean>
      isLocked:
        docs: Defines if the field is locked.
        type: optional<boolean>
      isDisabled:
        docs: Defines if the field is disabled.
        type: optional<boolean>
      partitioning:
        docs: Defines the partitioning of the field.
        type: string
      properties: FieldPropertiesDto
      nested:
        docs: The nested fields.
        type: optional<list<NestedFieldDto>>

  NestedFieldDto:
    extends: commons.Resource
    properties:
      fieldId:
        docs: The ID of the field.
        type: optional<integer>
      name:
        docs: The name of the field. Must be unique within the schema.
        type: string
      isHidden:
        docs: Defines if the field is hidden.
        type: optional<boolean>
      isLocked:
        docs: Defines if the field is locked.
        type: optional<boolean>
      isDisabled:
        docs: Defines if the field is disabled.
        type: optional<boolean>
      properties: FieldPropertiesDto

  ConfigureUIFieldsDto:
    properties:
      fieldsInLists:
        docs: The name of fields that are used in content lists.
        type: optional<list<string>>
      fieldsInReferences:
        docs: The name of fields that are used in content references.
        type: optional<list<string>>

  ReorderFieldsDto:
    properties:
      fieldIds:
        docs: The field ids in the target order.
        type: list<integer>

  UpdateFieldDto:
    properties:
      properties: FieldPropertiesDto

  SchemasDto:
    extends: commons.Resource
    properties:
      items:
        docs: The schemas.
        type: optional<list<SchemaDto>>

  CreateSchemaDto:
    extends: UpsertSchemaDto
    properties:
      name:
        docs: The name of the schema.
        type: string
      type: optional<SchemaType>
      isSingleton:
        docs: Set to true to allow a single content item only.
        type: optional<boolean>

  UpsertSchemaDto:
    properties:
      properties: optional<SchemaPropertiesDto>
      scripts: optional<SchemaScriptsDto>
      fieldsInReferences:
        docs: The names of the fields that should be used in references.
        type: optional<list<string>>
      fieldsInLists:
        docs: >-
          The names of the fields that should be shown in lists, including meta
          fields.
        type: optional<list<string>>
      fields:
        docs: Optional fields.
        type: optional<list<UpsertSchemaFieldDto>>
      previewUrls:
        docs: The optional preview urls.
        type: optional<map<string, string>>
      fieldRules:
        docs: The optional field Rules.
        type: optional<list<FieldRuleDto>>
      category:
        docs: The category.
        type: optional<string>
      isPublished:
        docs: Set it to true to autopublish the schema.
        type: optional<boolean>

  UpsertSchemaFieldDto:
    properties:
      name:
        docs: The name of the field. Must be unique within the schema.
        type: string
      isHidden:
        docs: Defines if the field is hidden.
        type: optional<boolean>
      isLocked:
        docs: Defines if the field is locked.
        type: optional<boolean>
      isDisabled:
        docs: Defines if the field is disabled.
        type: optional<boolean>
      partitioning:
        docs: Determines the optional partitioning of the field.
        type: optional<string>
      properties: FieldPropertiesDto
      nested:
        docs: The nested fields.
        type: optional<list<UpsertSchemaNestedFieldDto>>

  UpsertSchemaNestedFieldDto:
    properties:
      name:
        docs: The name of the field. Must be unique within the schema.
        type: string
      isHidden:
        docs: Defines if the field is hidden.
        type: optional<boolean>
      isLocked:
        docs: Defines if the field is locked.
        type: optional<boolean>
      isDisabled:
        docs: Defines if the field is disabled.
        type: optional<boolean>
      properties: FieldPropertiesDto

  UpdateSchemaDto:
    properties:
      label:
        docs: Optional label for the editor.
        type: optional<string>
      hints:
        docs: Hints to describe the schema.
        type: optional<string>
      contentsSidebarUrl:
        docs: The url to a the sidebar plugin for content lists.
        type: optional<string>
      contentSidebarUrl:
        docs: The url to a the sidebar plugin for content items.
        type: optional<string>
      contentEditorUrl:
        docs: The url to the editor plugin.
        type: optional<string>
      validateOnPublish:
        docs: True to validate the content items on publish.
        type: optional<boolean>
      tags:
        docs: Tags for automation processes.
        type: optional<list<string>>

  SynchronizeSchemaDto:
    extends: UpsertSchemaDto
    properties:
      noFieldDeletion:
        docs: True, when fields should not be deleted.
        type: optional<boolean>
      noFieldRecreation:
        docs: True, when fields with different types should not be recreated.
        type: optional<boolean>

  ChangeCategoryDto:
    properties:
      name:
        docs: The name of the category.
        type: optional<string>

  ConfigurePreviewUrlsDto: map<string, string>

  ConfigureFieldRulesDto:
    properties:
      fieldRules:
        docs: The field rules to configure.
        type: optional<list<FieldRuleDto>>
